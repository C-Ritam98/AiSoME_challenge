{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyOIfxTR8dGLj6NC7+VnNSl3"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":161,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5H7cKFtHTJfi","executionInfo":{"status":"ok","timestamp":1689510009601,"user_tz":-330,"elapsed":7571,"user":{"displayName":"Ritam Chattopadhyay","userId":"01007328510308016568"}},"outputId":"3b509b93-e069-4f4d-a0d3-29d5d72997c3"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive/; to attempt to forcibly remount, call drive.mount(\"/content/drive/\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive/')"]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","from torch.utils.data import DataLoader, Dataset\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import pickle, os, sys"],"metadata":{"id":"me4wivJ_U6LK","executionInfo":{"status":"ok","timestamp":1689510946518,"user_tz":-330,"elapsed":638,"user":{"displayName":"Ritam Chattopadhyay","userId":"01007328510308016568"}}},"execution_count":256,"outputs":[]},{"cell_type":"code","source":["data = pd.read_csv(\"/content/drive/MyDrive/AiSoME 2023/train_val.csv\")"],"metadata":{"id":"bHNjHwETVXc-","executionInfo":{"status":"ok","timestamp":1689512066312,"user_tz":-330,"elapsed":401,"user":{"displayName":"Ritam Chattopadhyay","userId":"01007328510308016568"}}},"execution_count":361,"outputs":[]},{"cell_type":"code","source":["data.head(10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"id":"MvjdjFnRV7pr","executionInfo":{"status":"ok","timestamp":1689512067014,"user_tz":-330,"elapsed":8,"user":{"displayName":"Ritam Chattopadhyay","userId":"01007328510308016568"}},"outputId":"87d8e7db-16c9-4eb1-c6de-62055b51b5dc"},"execution_count":362,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                     ID                                              tweet  \\\n","0  1296010336907038720t  @cath__kath AstraZeneca is made with the kidne...   \n","1  1336808189677940736t  It begins. Please find safe alternatives to th...   \n","2  1329488407307956231t  @PaolaQP1231 Well, I mean congratulations Covi...   \n","3  1364194604459900934t  @BorisJohnson for those of us that do not wish...   \n","4  1375938799247765515t  She has been trying to speak out: writing lett...   \n","5  1361038049556140034t  @DailyMailUK ðŸ˜• I'm confused: ðŸ’‰ WITH the vaccin...   \n","6  1365287445114322946t  We do not need any crazy twisted politician te...   \n","7  1364157842022891520t  @AgreeT0D1sagree @Matteo30115900 @Femi_Sorry I...   \n","8  1413367208537989123t  Taking One for the Team #TeamCanada New Astra~...   \n","9  1405695355996426240t  Canadians who received AstraZeneca vaccine exc...   \n","\n","                    labels  \n","0              ingredients  \n","1              side-effect  \n","2              side-effect  \n","3                mandatory  \n","4       side-effect rushed  \n","5    ineffective mandatory  \n","6                political  \n","7                mandatory  \n","8              side-effect  \n","9  side-effect ineffective  "],"text/html":["\n","\n","  <div id=\"df-cc9ab6b9-8183-4920-8875-026d0b290bca\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ID</th>\n","      <th>tweet</th>\n","      <th>labels</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1296010336907038720t</td>\n","      <td>@cath__kath AstraZeneca is made with the kidne...</td>\n","      <td>ingredients</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1336808189677940736t</td>\n","      <td>It begins. Please find safe alternatives to th...</td>\n","      <td>side-effect</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1329488407307956231t</td>\n","      <td>@PaolaQP1231 Well, I mean congratulations Covi...</td>\n","      <td>side-effect</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1364194604459900934t</td>\n","      <td>@BorisJohnson for those of us that do not wish...</td>\n","      <td>mandatory</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1375938799247765515t</td>\n","      <td>She has been trying to speak out: writing lett...</td>\n","      <td>side-effect rushed</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>1361038049556140034t</td>\n","      <td>@DailyMailUK ðŸ˜• I'm confused: ðŸ’‰ WITH the vaccin...</td>\n","      <td>ineffective mandatory</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>1365287445114322946t</td>\n","      <td>We do not need any crazy twisted politician te...</td>\n","      <td>political</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>1364157842022891520t</td>\n","      <td>@AgreeT0D1sagree @Matteo30115900 @Femi_Sorry I...</td>\n","      <td>mandatory</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>1413367208537989123t</td>\n","      <td>Taking One for the Team #TeamCanada New Astra~...</td>\n","      <td>side-effect</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>1405695355996426240t</td>\n","      <td>Canadians who received AstraZeneca vaccine exc...</td>\n","      <td>side-effect ineffective</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cc9ab6b9-8183-4920-8875-026d0b290bca')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-3a2b4180-ea3e-4962-9941-192d3da91d0a\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3a2b4180-ea3e-4962-9941-192d3da91d0a')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-3a2b4180-ea3e-4962-9941-192d3da91d0a button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-cc9ab6b9-8183-4920-8875-026d0b290bca button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-cc9ab6b9-8183-4920-8875-026d0b290bca');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":362}]},{"cell_type":"code","source":["len(data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hAN4Fpy3X2GW","executionInfo":{"status":"ok","timestamp":1689512068637,"user_tz":-330,"elapsed":3,"user":{"displayName":"Ritam Chattopadhyay","userId":"01007328510308016568"}},"outputId":"d5e0fe35-de75-47ff-8c40-257e6b3a4eb5"},"execution_count":363,"outputs":[{"output_type":"execute_result","data":{"text/plain":["9921"]},"metadata":{},"execution_count":363}]},{"cell_type":"code","source":["data['labels'].unique()"],"metadata":{"id":"ajuzaTcZV_AD","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689512070473,"user_tz":-330,"elapsed":2,"user":{"displayName":"Ritam Chattopadhyay","userId":"01007328510308016568"}},"outputId":"b02b090d-362e-47f7-a17a-b063c767fdc1"},"execution_count":364,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['ingredients', 'side-effect', 'mandatory', 'side-effect rushed',\n","       'ineffective mandatory', 'political', 'side-effect ineffective',\n","       'none', 'conspiracy', 'country', 'pharma', 'ineffective',\n","       'pharma ineffective', 'side-effect pharma', 'rushed',\n","       'side-effect mandatory political', 'unnecessary ineffective',\n","       'rushed mandatory side-effect', 'mandatory pharma',\n","       'unnecessary rushed mandatory', 'unnecessary',\n","       'pharma political unnecessary', 'rushed side-effect',\n","       'ingredients pharma side-effect', 'mandatory ineffective',\n","       'unnecessary mandatory', 'mandatory unnecessary',\n","       'ineffective side-effect', 'ineffective side-effect rushed',\n","       'side-effect unnecessary', 'ineffective rushed',\n","       'political rushed', 'religious', 'rushed political',\n","       'mandatory political', 'side-effect ingredients conspiracy',\n","       'pharma conspiracy', 'rushed unnecessary', 'pharma side-effect',\n","       'mandatory conspiracy', 'side-effect pharma political',\n","       'side-effect ingredients', 'ineffective unnecessary',\n","       'pharma political', 'ineffective pharma',\n","       'mandatory conspiracy ingredients', 'religious ingredients',\n","       'conspiracy pharma', 'rushed pharma', 'conspiracy unnecessary',\n","       'ingredients religious', 'mandatory side-effect',\n","       'conspiracy side-effect', 'side-effect conspiracy',\n","       'unnecessary side-effect rushed', 'rushed ingredients pharma',\n","       'side-effect mandatory ingredients',\n","       'side-effect rushed ingredients', 'unnecessary side-effect',\n","       'unnecessary rushed', 'pharma political side-effect',\n","       'mandatory rushed', 'conspiracy pharma ingredients',\n","       'conspiracy side-effect ingredients', 'unnecessary pharma',\n","       'pharma rushed', 'conspiracy political', 'pharma unnecessary',\n","       'conspiracy ingredients', 'conspiracy side-effect rushed',\n","       'conspiracy rushed', 'political country', 'mandatory ingredients',\n","       'side-effect rushed pharma', 'rushed ingredients',\n","       'side-effect political conspiracy',\n","       'ineffective unnecessary mandatory', 'ingredients side-effect',\n","       'ingredients conspiracy', 'country rushed',\n","       'ineffective rushed side-effect', 'political pharma',\n","       'pharma side-effect political', 'ingredients pharma',\n","       'side-effect rushed ineffective', 'rushed mandatory',\n","       'religious pharma', 'rushed ineffective',\n","       'ingredients ineffective', 'conspiracy ineffective',\n","       'ineffective political', 'country ineffective',\n","       'conspiracy political ingredients', 'unnecessary ingredients',\n","       'mandatory rushed unnecessary', 'pharma rushed side-effect',\n","       'side-effect ineffective rushed', 'mandatory religious',\n","       'rushed ingredients conspiracy', 'rushed country',\n","       'mandatory political rushed', 'rushed unnecessary side-effect',\n","       'ineffective unnecessary rushed', 'political unnecessary',\n","       'side-effect mandatory', 'political conspiracy',\n","       'ineffective rushed country', 'conspiracy ingredients religious',\n","       'side-effect unnecessary rushed', 'pharma ingredients',\n","       'conspiracy political pharma', 'unnecessary political side-effect',\n","       'conspiracy pharma unnecessary', 'mandatory rushed side-effect',\n","       'conspiracy country ingredients', 'pharma mandatory',\n","       'side-effect conspiracy ingredients', 'ingredients mandatory',\n","       'mandatory ineffective side-effect', 'religious side-effect',\n","       'unnecessary political', 'side-effect political',\n","       'unnecessary pharma rushed', 'ingredients rushed',\n","       'rushed side-effect ingredients', 'side-effect rushed unnecessary',\n","       'religious unnecessary', 'ineffective side-effect unnecessary',\n","       'country mandatory', 'unnecessary side-effect ingredients',\n","       'conspiracy ineffective side-effect',\n","       'mandatory conspiracy pharma', 'unnecessary conspiracy',\n","       'side-effect political pharma', 'country political',\n","       'unnecessary conspiracy side-effect', 'political side-effect',\n","       'unnecessary ineffective rushed', 'rushed conspiracy',\n","       'unnecessary ineffective side-effect',\n","       'side-effect conspiracy rushed', 'ineffective country',\n","       'rushed mandatory political', 'rushed side-effect conspiracy',\n","       'unnecessary mandatory ingredients',\n","       'side-effect political rushed', 'conspiracy country',\n","       'side-effect unnecessary ineffective',\n","       'ineffective unnecessary ingredients', 'ineffective ingredients',\n","       'side-effect ingredients religious', 'pharma side-effect rushed',\n","       'pharma rushed political', 'country side-effect',\n","       'conspiracy mandatory', 'political mandatory',\n","       'rushed ineffective side-effect', 'rushed rushed',\n","       'country political pharma', 'rushed religious',\n","       'side-effect pharma conspiracy', 'pharma ineffective conspiracy',\n","       'pharma mandatory unnecessary', 'conspiracy mandatory political',\n","       'rushed country side-effect', 'mandatory pharma ingredients',\n","       'ineffective side-effect pharma', 'side-effect mandatory rushed',\n","       'unnecessary religious', 'pharma conspiracy ingredients',\n","       'side-effect unnecessary mandatory',\n","       'side-effect ineffective unnecessary',\n","       'ineffective rushed unnecessary', 'side-effect rushed country',\n","       'side-effect pharma rushed', 'rushed political ineffective',\n","       'side-effect pharma ingredients', 'conspiracy rushed side-effect',\n","       'pharma unnecessary mandatory', 'unnecessary conspiracy mandatory',\n","       'ineffective side-effect conspiracy',\n","       'ingredients side-effect pharma',\n","       'side-effect religious mandatory', 'country pharma',\n","       'ingredients political', 'ingredients unnecessary',\n","       'pharma conspiracy side-effect', 'unnecessary rushed pharma',\n","       'side-effect ingredients ineffective',\n","       'side-effect rushed mandatory', 'conspiracy religious',\n","       'unnecessary pharma political', 'rushed unnecessary pharma',\n","       'rushed ineffective political', 'ineffective rushed pharma',\n","       'rushed pharma ineffective', 'ineffective country side-effect',\n","       'pharma unnecessary conspiracy', 'country unnecessary',\n","       'side-effect country', 'country conspiracy',\n","       'pharma conspiracy rushed', 'unnecessary mandatory ineffective',\n","       'side-effect mandatory pharma', 'unnecessary pharma ineffective',\n","       'ineffective pharma unnecessary',\n","       'unnecessary side-effect conspiracy', 'rushed side-effect pharma',\n","       'rushed side-effect mandatory', 'country ingredients',\n","       'unnecessary country', 'conspiracy country pharma',\n","       'mandatory political religious', 'rushed side-effect political',\n","       'conspiracy unnecessary ingredients',\n","       'mandatory side-effect conspiracy', 'rushed country ineffective',\n","       'conspiracy ingredients side-effect', 'political rushed pharma',\n","       'mandatory country', 'political unnecessary mandatory',\n","       'mandatory side-effect rushed', 'political rushed mandatory',\n","       'unnecessary conspiracy ingredients', 'pharma rushed ineffective',\n","       'rushed political pharma', 'mandatory country political',\n","       'political religious conspiracy',\n","       'side-effect ineffective political',\n","       'side-effect ingredients mandatory', 'political ineffective',\n","       'ineffective mandatory unnecessary',\n","       'side-effect mandatory ineffective', 'rushed country political',\n","       'mandatory ingredients side-effect',\n","       'ingredients conspiracy side-effect',\n","       'conspiracy pharma political', 'side-effect ineffective mandatory',\n","       'side-effect conspiracy pharma', 'ineffective rushed political',\n","       'ingredients conspiracy rushed',\n","       'ineffective mandatory side-effect',\n","       'rushed conspiracy side-effect', 'pharma ineffective ingredients',\n","       'conspiracy ineffective ingredients',\n","       'political rushed ingredients', 'political religious mandatory',\n","       'conspiracy mandatory side-effect',\n","       'unnecessary conspiracy pharma', 'conspiracy ingredients pharma',\n","       'pharma side-effect unnecessary', 'political country mandatory',\n","       'unnecessary mandatory rushed',\n","       'side-effect unnecessary ingredients',\n","       'ingredients side-effect mandatory',\n","       'unnecessary rushed side-effect', 'rushed unnecessary mandatory',\n","       'ineffective conspiracy', 'rushed side-effect unnecessary',\n","       'rushed mandatory pharma', 'pharma mandatory political',\n","       'political conspiracy side-effect', 'mandatory rushed pharma',\n","       'conspiracy country side-effect', 'mandatory political conspiracy',\n","       'conspiracy ingredients mandatory', 'conspiracy pharma rushed',\n","       'ingredients ineffective rushed', 'ingredients pharma political',\n","       'rushed ingredients mandatory', 'pharma unnecessary political',\n","       'side-effect ingredients unnecessary', 'political ingredients',\n","       'political pharma rushed', 'political conspiracy mandatory',\n","       'ineffective unnecessary pharma', 'side-effect pharma unnecessary',\n","       'ingredients conspiracy pharma', 'country side-effect religious',\n","       'country side-effect ineffective', 'side-effect pharma mandatory',\n","       'mandatory pharma conspiracy',\n","       'ingredients side-effect conspiracy',\n","       'unnecessary ingredients side-effect',\n","       'unnecessary rushed political', 'pharma country',\n","       'rushed conspiracy political', 'pharma mandatory rushed'],\n","      dtype=object)"]},"metadata":{},"execution_count":364}]},{"cell_type":"code","source":["data['labels'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wZeLnxhtedVi","executionInfo":{"status":"ok","timestamp":1689512071145,"user_tz":-330,"elapsed":4,"user":{"displayName":"Ritam Chattopadhyay","userId":"01007328510308016568"}},"outputId":"6e7d0726-8e0d-4537-e07f-19e6f38f1a36"},"execution_count":365,"outputs":[{"output_type":"execute_result","data":{"text/plain":["side-effect                        2883\n","ineffective                        1204\n","rushed                              772\n","pharma                              742\n","none                                629\n","                                   ... \n","side-effect pharma ingredients        1\n","pharma unnecessary mandatory          1\n","ingredients side-effect pharma        1\n","side-effect religious mandatory       1\n","pharma mandatory rushed               1\n","Name: labels, Length: 288, dtype: int64"]},"metadata":{},"execution_count":365}]},{"cell_type":"code","source":["labels = []\n","\n","for i in data['labels'].unique():\n","  labels.extend(i.split())\n","\n","labels = list(dict.fromkeys(labels).keys())"],"metadata":{"id":"fUhRLbRZXgPr","executionInfo":{"status":"ok","timestamp":1689512073034,"user_tz":-330,"elapsed":1,"user":{"displayName":"Ritam Chattopadhyay","userId":"01007328510308016568"}}},"execution_count":366,"outputs":[]},{"cell_type":"code","source":["labels"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LWq7OgShZLQo","executionInfo":{"status":"ok","timestamp":1689512073578,"user_tz":-330,"elapsed":2,"user":{"displayName":"Ritam Chattopadhyay","userId":"01007328510308016568"}},"outputId":"fc5cbb0f-8cbe-4aaa-da0e-c6b9200f66bb"},"execution_count":367,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['ingredients',\n"," 'side-effect',\n"," 'mandatory',\n"," 'rushed',\n"," 'ineffective',\n"," 'political',\n"," 'none',\n"," 'conspiracy',\n"," 'country',\n"," 'pharma',\n"," 'unnecessary',\n"," 'religious']"]},"metadata":{},"execution_count":367}]},{"cell_type":"code","source":["label_to_id = {label:id for id, label in enumerate(labels)}"],"metadata":{"id":"lTtB8HKWZMIq","executionInfo":{"status":"ok","timestamp":1689512074207,"user_tz":-330,"elapsed":0,"user":{"displayName":"Ritam Chattopadhyay","userId":"01007328510308016568"}}},"execution_count":368,"outputs":[]},{"cell_type":"code","source":["corr = np.zeros((len(labels), len(labels)))\n","pmi = np.zeros((len(labels), len(labels)))\n","for label_set in data['labels']:\n","  for label in label_set.split():\n","    for neighbour in label_set.split():\n","        corr[label_to_id[label],label_to_id[neighbour]] += 1\n","\n","label_occ = corr.sum(axis=1)\n","# corr = corr / corr.sum(axis=1).reshape(-1,1)"],"metadata":{"id":"P6i-mjvQaaRo","executionInfo":{"status":"ok","timestamp":1689512074840,"user_tz":-330,"elapsed":2,"user":{"displayName":"Ritam Chattopadhyay","userId":"01007328510308016568"}}},"execution_count":369,"outputs":[]},{"cell_type":"code","source":["label_occ"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"176izp7JlqYh","executionInfo":{"status":"ok","timestamp":1689512076545,"user_tz":-330,"elapsed":3,"user":{"displayName":"Ritam Chattopadhyay","userId":"01007328510308016568"}},"outputId":"d4448c35-fd45-4e9d-fd9b-31e49e35e520"},"execution_count":370,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 750., 4883., 1116., 2304., 2196.,  966.,  629.,  924.,  292.,\n","       1897., 1159.,  105.])"]},"metadata":{},"execution_count":370}]},{"cell_type":"code","source":["class_weights = (1. - label_occ/ sum(label_occ)) ** 2\n","class_weights = torch.from_numpy(class_weights).view(1, -1)\n","class_weights.size()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HahworXCmjCk","executionInfo":{"status":"ok","timestamp":1689512078914,"user_tz":-330,"elapsed":655,"user":{"displayName":"Ritam Chattopadhyay","userId":"01007328510308016568"}},"outputId":"36a1945e-8580-4800-9647-5020c94372e8"},"execution_count":371,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Size([1, 12])"]},"metadata":{},"execution_count":371}]},{"cell_type":"markdown","source":["Co-occurance matrix"],"metadata":{"id":"q3S3IVPdmWJK"}},{"cell_type":"code","source":["# corr = np.corrcoef(corr)\n","mask = np.zeros_like(corr)\n","mask[np.triu_indices_from(mask)] = True\n","with sns.axes_style(\"white\"):\n","    ax = sns.heatmap(corr, mask=mask, vmin=None, vmax=None, square=True, xticklabels=labels, yticklabels=labels, cmap=\"coolwarm\")\n","    plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":504},"id":"2tKRsBn0cCJX","executionInfo":{"status":"ok","timestamp":1689510948943,"user_tz":-330,"elapsed":2,"user":{"displayName":"Ritam Chattopadhyay","userId":"01007328510308016568"}},"outputId":"2d3e9e93-97ac-4719-f96e-ee5bbc6fa9c7"},"execution_count":268,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["PMI"],"metadata":{"id":"KpME1_o3xkd2"}},{"cell_type":"code","source":["for label_set in data['labels']:\n","  for label in label_set.split():\n","    for neighbour in label_set.split():\n","        pmi[label_to_id[label],label_to_id[neighbour]] = corr[label_to_id[label],label_to_id[neighbour]] / (label_occ[label_to_id[label]] * label_occ[label_to_id[neighbour]])\n","        pmi[label_to_id[label],label_to_id[neighbour]] = np.log2(pmi[label_to_id[label],label_to_id[neighbour]])"],"metadata":{"id":"_AeGbEhXw3cU","executionInfo":{"status":"ok","timestamp":1689510949937,"user_tz":-330,"elapsed":4,"user":{"displayName":"Ritam Chattopadhyay","userId":"01007328510308016568"}}},"execution_count":269,"outputs":[]},{"cell_type":"code","source":["# corr = np.corrcoef(corr)\n","mask = np.zeros_like(corr)\n","mask[np.triu_indices_from(mask)] = True\n","with sns.axes_style(\"white\"):\n","    ax = sns.heatmap(pmi, mask=mask, vmin=None, vmax=None, square=True, xticklabels=labels, yticklabels=labels, cmap=\"coolwarm\")\n","    plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":509},"id":"4U_rHLnUw-vZ","executionInfo":{"status":"ok","timestamp":1689510949938,"user_tz":-330,"elapsed":5,"user":{"displayName":"Ritam Chattopadhyay","userId":"01007328510308016568"}},"outputId":"72143da7-986b-4352-c19b-bdb7e520c4c7"},"execution_count":270,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import re\n","\n","def find_all_usernames_by_count(list_of_strings):\n","\n","  username_count_mapping = {}\n","  for string in list_of_strings:\n","    extracted_usernames = re.findall('@[A-Za-z0-9_]+', string)\n","\n","    for userName in extracted_usernames:\n","      username_count_mapping[userName] = username_count_mapping.get(userName, 0) + 1\n","\n","  return {k:v for (k,v) in sorted(username_count_mapping.items(), key=lambda item: -item[1])}\n","\n","username_count = find_all_usernames_by_count(data['tweet'].tolist())"],"metadata":{"id":"Zef2fbza0_Mf","executionInfo":{"status":"ok","timestamp":1689512088163,"user_tz":-330,"elapsed":610,"user":{"displayName":"Ritam Chattopadhyay","userId":"01007328510308016568"}}},"execution_count":372,"outputs":[]},{"cell_type":"code","source":["!pip install emoji"],"metadata":{"id":"sw3zxPBo91A0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import emoji\n","def remove_emojis(text):\n","    return emoji.replace_emoji(text)\n","\n","def remove_non_occurring_usernames(text):\n","  try:\n","    new_text = [word for word in text.split() if not (word in username_count.keys()) or (username_count[word] >= 2)]\n","  except AttributeError as e:\n","    print(text)\n","  return ' '.join(new_text)"],"metadata":{"id":"Nrx5ikuB81GJ","executionInfo":{"status":"ok","timestamp":1689512093266,"user_tz":-330,"elapsed":8,"user":{"displayName":"Ritam Chattopadhyay","userId":"01007328510308016568"}}},"execution_count":374,"outputs":[]},{"cell_type":"code","source":["data['tweet'] = data['tweet'].apply(lambda x: remove_emojis(x))\n","data['tweet'] = data['tweet'].apply(lambda x: remove_non_occurring_usernames(x))\n","data['tweet'] = data['tweet'].apply(lambda x: re.sub('https://\\S+', '', x))\n","data['tweet'] = data['tweet'].apply(lambda x: re.sub('file://\\S+', '', x))\n","data['tweet'] = data['tweet'].apply(lambda x: ' '.join([w for w in x.split() if len(w) <= 25]))"],"metadata":{"id":"MENklZpVHAqh","executionInfo":{"status":"ok","timestamp":1689512099840,"user_tz":-330,"elapsed":2622,"user":{"displayName":"Ritam Chattopadhyay","userId":"01007328510308016568"}}},"execution_count":375,"outputs":[]},{"cell_type":"code","source":["data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"NdnJ0DbSJuEZ","executionInfo":{"status":"ok","timestamp":1689512099841,"user_tz":-330,"elapsed":7,"user":{"displayName":"Ritam Chattopadhyay","userId":"01007328510308016568"}},"outputId":"ba1e7799-6848-46c8-8a69-c6101a62b92c"},"execution_count":376,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                     ID                                              tweet  \\\n","0  1296010336907038720t  AstraZeneca is made with the kidney cells of a...   \n","1  1336808189677940736t  It begins. Please find safe alternatives to th...   \n","2  1329488407307956231t  @PaolaQP1231 Well, I mean congratulations Covi...   \n","3  1364194604459900934t  @BorisJohnson for those of us that do not wish...   \n","4  1375938799247765515t  She has been trying to speak out: writing lett...   \n","\n","               labels  \n","0         ingredients  \n","1         side-effect  \n","2         side-effect  \n","3           mandatory  \n","4  side-effect rushed  "],"text/html":["\n","\n","  <div id=\"df-4f65041d-72f5-4554-970a-1f9b7245bce7\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ID</th>\n","      <th>tweet</th>\n","      <th>labels</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1296010336907038720t</td>\n","      <td>AstraZeneca is made with the kidney cells of a...</td>\n","      <td>ingredients</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1336808189677940736t</td>\n","      <td>It begins. Please find safe alternatives to th...</td>\n","      <td>side-effect</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1329488407307956231t</td>\n","      <td>@PaolaQP1231 Well, I mean congratulations Covi...</td>\n","      <td>side-effect</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1364194604459900934t</td>\n","      <td>@BorisJohnson for those of us that do not wish...</td>\n","      <td>mandatory</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1375938799247765515t</td>\n","      <td>She has been trying to speak out: writing lett...</td>\n","      <td>side-effect rushed</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4f65041d-72f5-4554-970a-1f9b7245bce7')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-ae4de387-d147-4ee1-88c0-5753448c0ceb\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ae4de387-d147-4ee1-88c0-5753448c0ceb')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-ae4de387-d147-4ee1-88c0-5753448c0ceb button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-4f65041d-72f5-4554-970a-1f9b7245bce7 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-4f65041d-72f5-4554-970a-1f9b7245bce7');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":376}]},{"cell_type":"code","source":["plt.plot([max([len(w) for w in tweet.split()]) for tweet in data['tweet'].tolist()])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":448},"id":"ikJFMMIwMbjD","executionInfo":{"status":"ok","timestamp":1689512104320,"user_tz":-330,"elapsed":1640,"user":{"displayName":"Ritam Chattopadhyay","userId":"01007328510308016568"}},"outputId":"ef5ce7df-a168-4c46-93f4-8a61ebb466c4"},"execution_count":377,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x79f5a0ea7940>]"]},"metadata":{},"execution_count":377},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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4YUXhJCQEGHXrl3ClStXjH+lpaXGNM8//7zQrl07YceOHcLBgweFQYMGCYMGDTLOr3t9d8SIEUJqaqqwZcsWoXXr1iZf333ttdeEU6dOCYsWLfK413dNqf+2kSCwruVy4MABwcfHR3j//feFs2fPCitXrhQCAwOFFStWGNPMnz9faNGihfDzzz8LR48eFcaMGWPyNdN+/foJycnJwp49e4SuXbuKXjMtKCgQwsPDhSeeeEI4fvy4sHr1aiEwMNCtX99taPLkycLNN99sfFV67dq1QmhoqPD6668b07CubVNUVCQcPnxYOHz4sABA+OSTT4TDhw8L58+fFwTBefW6d+9ewcfHR/j444+FU6dOCXPmzOGr0o7w+eefC+3atRP8/PyEgQMHCklJSa4ukmIBMPm3bNkyY5qysjLh73//u3DTTTcJgYGBwoMPPihcuXJFlE9WVpYwatQoISAgQAgNDRVeeeUVoaqqSpRm586dwm233Sb4+fkJnTp1Eq3DUzUMXljX8vnll1+EXr16CVqtVujevbvw1VdfieYbDAbhrbfeEsLDwwWtVisMHz5cSEtLE6XJz88XJkyYIDRv3lwIDg4WnnzySaGoqEiU5siRI8KQIUMErVYr3HzzzcL8+fMdvm1KotfrhZdffllo166d4O/vL3Tq1En417/+JXr1lnVtm507d5ocnydPniwIgnPr9ccffxRuueUWwc/PT+jZs6ewadMmydujEYR6X11IREREpHB85oWIiIhUhcELERERqQqDFyIiIlIVBi9ERESkKgxeiIiISFUYvBAREZGqMHghIiIiVWHwQkRERKrC4IWIiIhUhcELERERqQqDFyIiIlIVBi9ERESkKv8fI6rHfxpB3EwAAAAASUVORK5CYII=\n"},"metadata":{}}]},{"cell_type":"code","source":["for tweet in data['tweet'].tolist():\n","  for w in tweet.split():\n","    if(len(w) > 20):\n","      print(w)"],"metadata":{"id":"nQIFvEwqM-UG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","\n","train, val = train_test_split(data, test_size=0.2)"],"metadata":{"id":"kKuDe-6bXyZ0","executionInfo":{"status":"ok","timestamp":1689512123291,"user_tz":-330,"elapsed":551,"user":{"displayName":"Ritam Chattopadhyay","userId":"01007328510308016568"}}},"execution_count":381,"outputs":[]},{"cell_type":"code","source":["class Vocabulary:\n","\n","  def __init__(self, data, token_vocab_size = 25000):\n","\n","    tweets = data[\"tweet\"].tolist()\n","    all_tokens = [[tok for tok in tweet.split()] for tweet in tweets]\n","    self.char_counts = {}\n","    self.tok_counts = {}\n","    self.char_to_id = {}\n","    self.id_to_char = {}\n","    self.tok_to_id = {}\n","    self.id_to_tok = {}\n","\n","    for line in all_tokens:\n","      for tok in line:\n","        self.tok_counts[tok] = self.tok_counts.get(tok, 0) + 1\n","        for char in tok:\n","          self.char_counts[char] = self.char_counts.get(char, 0) + 1\n","\n","    self.tok_counts = {k: v for k, v in sorted(self.tok_counts.items(), key=lambda item: -item[1])}\n","    self.char_counts = {k: v for k, v in sorted(self.char_counts.items(), key=lambda item: -item[1])}\n","\n","    self.tok_to_id[\"<pad_tok>\"] = 0\n","    self.tok_to_id[\"<unk_tok>\"] = 1\n","\n","    self.char_to_id[\"<pad_char>\"] = 0\n","    self.char_to_id[\"<unk_char>\"] = 1\n","\n","    char_id = 2\n","    for k,v in self.char_counts.items():\n","      self.char_to_id[k] = char_id\n","      char_id += 1\n","\n","    tok_id = 2\n","    for k,v in self.tok_counts.items():\n","      self.tok_to_id[k] = tok_id\n","\n","      if tok_id - 2 == token_vocab_size:\n","        break\n","      tok_id += 1\n","\n","    self.id_to_tok = {v:k for k,v in self.tok_to_id.items()}\n","    self.id_to_char = {v:k for k,v in self.char_to_id.items()}\n","\n","  def stoi(self, token: str):\n","    return self.tok_to_id.get(token, self.token_to_id[\"<unk_tok>\"])\n","\n","  def chartoi(self, char):\n","    return self.char_to_id.get(char, self.char_to_id[\"<unk_char>\"])\n","\n","\n","  def word_tokenize(self, sentence):\n","    '''\n","    input: sentence [str]\n","    output: List of token ids present in vocabulary\n","    '''\n","    sentence = sentence.split()\n","    tokenized_sentence = [self.tok_to_id.get(tok, self.tok_to_id[\"<unk_tok>\"]) for tok in sentence]\n","    return tokenized_sentence\n","\n","  def char_tokenize(self, sentence):\n","    '''\n","    input: sentence [str]\n","    output: Matrix of char token ids present in vocabulary, each word length truncated/padded to length self.sentence_toke_limit.\n","    '''\n","    char_tokenized_matrix = [[self.char_to_id.get(c, self.char_to_id[\"<unk_char>\"]) for c in tok] for tok in sentence.split()]\n","\n","    for i,row in enumerate(char_tokenized_matrix):\n","      if len(row) > 25:\n","        char_tokenized_matrix[i] = row[:25]\n","      elif len(row) < 25:\n","        char_tokenized_matrix[i] = row + [0] * (25 - len(row))\n","\n","    return char_tokenized_matrix\n","\n","\n","\n","class CustomDataset(Dataset):\n","    def __init__(self, data, vocab_object_exist_ok = None):\n","        self.data = data\n","        if vocab_object_exist_ok is None:\n","          self.vocab_object = Vocabulary(self.data, token_vocab_size = 90000)\n","        else:\n","          self.vocab_object = vocab_object_exist_ok\n","\n","    def __len__(self):\n","        return len(self.data)\n","\n","    def __getitem__(self, idx):\n","        sentence = self.data.iloc[idx][\"tweet\"]\n","        char_tokenized_matrix = self.vocab_object.char_tokenize(sentence)\n","        tokenized_sentence = self.vocab_object.word_tokenize(sentence)\n","        class_labels_string = self.data.iloc[idx][\"labels\"]\n","        labels = [label_to_id[classes] for classes in class_labels_string.split()]\n","        return (labels, tokenized_sentence, char_tokenized_matrix, len(tokenized_sentence), len(labels))\n","\n","\n","def postprocess_batch(data):\n","    '''\n","    input: data [a list of tuples, coming directly from __getitem__() of the Dataset subclass created above]\n","    '''\n","    class_labels, tokenized_sentence, char_tokenized_matrix, lengths, label_lengths = zip(*data)\n","\n","    max_length = max(lengths)\n","    max_label_length = max(label_lengths)\n","    batch_sz = len(class_labels)\n","\n","    label_matrix = torch.zeros(batch_sz, 12)\n","    indices = []\n","\n","    for class_label in class_labels:\n","      last_label = class_label[-1]\n","\n","      class_label.extend([last_label] * (max_label_length - len(class_label)))\n","      indices.append(class_label)\n","\n","    label_matrix = label_matrix.scatter_(dim=1, index= torch.tensor(indices), src = torch.ones(batch_sz, max_label_length))\n","\n","    w_sent = torch.zeros((batch_sz, max_length))\n","    char_sent = torch.zeros((batch_sz, max_length, 25))\n","\n","    for i,e in enumerate(tokenized_sentence):\n","        len_of_curr_sent = len(e)\n","        w_sent[i] = torch.tensor(e[:max_length] + [0]*(max_length-len_of_curr_sent))\n","        char_sent[i] = torch.tensor(char_tokenized_matrix[i][:max_length] + [[0]*25]*(max_length-len_of_curr_sent))\n","\n","\n","    return {\"word_tokenized\": w_sent.type(torch.LongTensor), \"char_tokenized\": char_sent.type(torch.LongTensor), \"class\": label_matrix}\n","\n","\n","BATCH_SIZE = 64\n","vocab_object_exist_ok = None\n","\n","PATH_TO_VOCAB_OBJ = \"/content/drive/MyDrive/AiSoME 2023/saved_objects.pkl\"\n","if os.path.exists(PATH_TO_VOCAB_OBJ):\n","    with open(PATH_TO_VOCAB_OBJ, 'rb') as f:\n","        dicts = pickle.load(f)\n","    vocab_object_exist_ok = dicts[\"vocab_object\"]\n","\n","\n","train_dataset = CustomDataset(train, vocab_object_exist_ok)\n","train_dataloader = DataLoader(train_dataset, shuffle = True, batch_size = BATCH_SIZE, collate_fn = postprocess_batch)\n","\n","val_dataset = CustomDataset(val, train_dataset.vocab_object)\n","val_dataloader = DataLoader(val_dataset, shuffle = False, batch_size = 100, collate_fn = postprocess_batch)\n","\n","# test_dataset = CustomDataset(Test, train_dataset.vocab_object)\n","# test_dataloader = DataLoader(test_dataset, shuffle = False, batch_size = 100, collate_fn = postprocess_batch)\n","\n","if not os.path.exists(PATH_TO_VOCAB_OBJ):\n","    with open(PATH_TO_VOCAB_OBJ, 'wb') as f:\n","        pickle.dump({\"vocab_object\":train_dataset.vocab_object}, f, pickle.HIGHEST_PROTOCOL)\n"],"metadata":{"id":"fH0nZjufJzDB","executionInfo":{"status":"ok","timestamp":1689513244727,"user_tz":-330,"elapsed":445,"user":{"displayName":"Ritam Chattopadhyay","userId":"01007328510308016568"}}},"execution_count":427,"outputs":[]},{"cell_type":"code","source":["len(train_dataset.vocab_object.tok_to_id)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"m42QV9oYLxLI","executionInfo":{"status":"ok","timestamp":1689513248783,"user_tz":-330,"elapsed":398,"user":{"displayName":"Ritam Chattopadhyay","userId":"01007328510308016568"}},"outputId":"a0087a55-4512-4955-cbc0-b74c321e0307"},"execution_count":428,"outputs":[{"output_type":"execute_result","data":{"text/plain":["33481"]},"metadata":{},"execution_count":428}]},{"cell_type":"code","source":["import gensim\n","from gensim.models import Word2Vec, KeyedVectors, FastText\n","\n","WORD_EMB_DIM = 100\n","\n","def generate_word_embeddings(type = \"word2vec\"):\n","\n","    common_texts = [[word for word in sent.split()] for sent in data[\"tweet\"].tolist()] # + Val[\"tweet\"].tolist()]\n","\n","    if type == \"word2vec\":\n","        word2vec = Word2Vec(sentences=common_texts, vector_size= WORD_EMB_DIM, min_count= 1, window=5, workers=4, sg = 0, \\\n","                            negative = 5, seed = 1, epochs=20)\n","        return word2vec\n","    elif type==\"fasttext\":\n","        fasttext = FastText(vector_size=WORD_EMB_DIM, window=5, min_count=2, sentences=common_texts, epochs=8)\n","        return fasttext"],"metadata":{"id":"divoLUcPL0P_","executionInfo":{"status":"ok","timestamp":1689513250618,"user_tz":-330,"elapsed":3,"user":{"displayName":"Ritam Chattopadhyay","userId":"01007328510308016568"}}},"execution_count":429,"outputs":[]},{"cell_type":"code","source":["w2v = generate_word_embeddings(type = \"word2vec\")"],"metadata":{"id":"eBd0E9CTL8Ju","executionInfo":{"status":"ok","timestamp":1689513261861,"user_tz":-330,"elapsed":8970,"user":{"displayName":"Ritam Chattopadhyay","userId":"01007328510308016568"}}},"execution_count":430,"outputs":[]},{"cell_type":"code","source":["'''\n","character encoder block\n","'''\n","class CharacterEncoderBlock(nn.Module):\n","    def __init__(self, in_dim: int ,out_dim: int):\n","        super(CharacterEncoderBlock, self).__init__()\n","        self.conv2d = nn.Conv2d(in_dim, out_dim, kernel_size = (1,4), padding = 0, stride = 1, groups= 1)\n","\n","    def forward(self, X):\n","        '''\n","        X = (batch_sz, seq_len, char_num, char_emb_dim)\n","        '''\n","        X = X.permute(0, 3, 1, 2)\n","        X = self.conv2d(X)\n","        X, _ = torch.max(X, dim = 3)\n","        X = X.permute(0, 2, 1)\n","        return X\n","\n","'''\n","Self-attention model\n","'''\n","class SelfAttentionModule(nn.Module):\n","    def __init__(self, emb_dim: int, num_heads: int):\n","        super(SelfAttentionModule, self).__init__()\n","        self.emb_dim = emb_dim\n","        self.num_heads = num_heads\n","        assert emb_dim%num_heads == 0, \"Number of attention heads must divide the embedding dimension size !\"\n","        self.Q = nn.ModuleList([nn.Linear(emb_dim, emb_dim//num_heads) for i in range(num_heads)])\n","        self.K = nn.ModuleList([nn.Linear(emb_dim, emb_dim//num_heads) for i in range(num_heads)])\n","        self.V = nn.ModuleList([nn.Linear(emb_dim, emb_dim//num_heads) for i in range(num_heads)])\n","        self.FFN_1 = nn.Linear(emb_dim, 4*emb_dim)\n","        self.FFN_2 = nn.Linear(4*emb_dim, emb_dim)\n","        self.LN_1 = nn.LayerNorm(normalized_shape = emb_dim, elementwise_affine=True) # if elementwise_affine=True :learnable gamma and beta\n","        self.LN_2 = nn.LayerNorm(normalized_shape = emb_dim, elementwise_affine=True) # if elementwise_affine=True :learnable gamma and beta\n","\n","        self.store_attn = []\n","\n","    def ask_attn(self):\n","        return self.store_attn\n","\n","    def forward(self, X):\n","        '''\n","        X = (batch_sz, seq_len, emb_dim)\n","        '''\n","        batch_sz = X.size(0)\n","        seq_len = X.size(1)\n","        assert self.emb_dim == X.size(-1), \"Dim mismatch in self_attn module!!\"\n","\n","        X_ = self.LN_1(X)\n","\n","        attended_x_list = []\n","        self.store_attn = []\n","\n","        for i in range(self.num_heads):\n","            q, k, v = self.Q[i](X_), self.K[i](X_), self.V[i](X_)\n","\n","            attention_scores = F.softmax(torch.bmm(q,k.permute(0,2,1)) / np.sqrt(self.emb_dim), dim = -1) # (batch_sz, seq_len, seq_len)\n","            attended_x = torch.bmm(F.dropout(attention_scores, training= self.training, p=0.15), v) # (batch_sz, seq_len, emb_dim//num_heads)\n","            attended_x_list.append(attended_x)\n","\n","            # self.store_attn.append(attention_scores.detach())\n","\n","        attended_x = torch.cat(attended_x_list, dim = -1)\n","        assert self.emb_dim == attended_x.size(-1), f\"Dim mismatch in self_attn module, given {attended_x.size(-1)} required {self.emb_dim} at last dimension!\"\n","\n","        X = X + attended_x\n","        X_ = self.LN_2(X)\n","\n","        X_ = self.FFN_2(F.gelu(self.FFN_1(F.dropout(X_, p = 0.15, training = self.training))))\n","\n","        return X+X_\n","\n","'''\n","depthwise seperable conv\n","'''\n","class ConvModule(nn.Module):\n","    def __init__(self, in_channel:int, out_channel: int, kernel_size: int):\n","        super(ConvModule, self).__init__()\n","        assert kernel_size % 2 == 1, \"Kernel size should be an odd number !!\"\n","        self.conv_1d = nn.Conv1d(in_channel, in_channel, kernel_size = kernel_size, stride = 1, padding = kernel_size//2, groups = in_channel)\n","        self.conv_pointwise = nn.Conv1d(in_channel, out_channel, kernel_size = 1, stride = 1, padding = 0, groups = 1)\n","        self.Layernorm = nn.LayerNorm(normalized_shape = in_channel, elementwise_affine=True) # if elementwise_affine=True :learnable gamma and beta\n","\n","    def forward(self, X):\n","        '''\n","        X = (batch_sz, seq_len, emb_dim)\n","        in_channel == emb_dim\n","        '''\n","        X = F.dropout(X, p=0.15, training = self.training)\n","        X_ = self.Layernorm(X)\n","        X_ = X_.permute(0, 2, 1)\n","        X_ = self.conv_pointwise(self.conv_1d(X_))\n","        X_ = X_.permute(0, 2, 1)\n","        return X+X_\n","\n","'''\n","single Encoder block\n","'''\n","class EncoderBlock(nn.Module):\n","    def __init__(self, emb_dim:int,\\\n","               num_conv_blocks: int,\\\n","               num_attention_blocks: int,\\\n","               num_heads: int):\n","        super(EncoderBlock, self).__init__()\n","        self.layers = [ConvModule(emb_dim, emb_dim, 5) for i in range(num_conv_blocks)]\n","        self.layers.extend([SelfAttentionModule(emb_dim, num_heads) for i in range(num_attention_blocks)])\n","        self.transform = nn.Sequential(*self.layers)\n","\n","    def forward(self, X):\n","        X_ = self.transform(X)\n","        return X+X_\n","\n","'''\n","complete tweet-analysis-model\n","'''\n","class TweetAnalysisModel(nn.Module):\n","    def __init__(self,\n","               word_vocab: int,\\\n","               char_vocab: int,\\\n","               char_emb_dim: int,\\\n","               word_emb_dim: int,\\\n","               num_conv_blocks: int,\\\n","               num_attention_blocks: int,\\\n","               num_heads: int,\\\n","               num_encoder_blocks: int,\\\n","               num_classes: int,\n","               positional_encoding):\n","        '''\n","        char_emb_dim: embedding dimension of characters\n","        word_emb_dim: embedding dimension of word\n","        num_conv_blocks: convolution blocks per encoder block\n","        num_attention_blocks: attention blocks per encoder block\n","        num_heads: number of attention head in each attention block\n","        num_encoder_blocks: total number of encoder blocks in the model\n","        num_classes: classification heads in the problem\n","        '''\n","        super(TweetAnalysisModel, self).__init__()\n","        self.positional_encoding = positional_encoding\n","        if positional_encoding:\n","            self.positional_embedding = nn.Embedding(1000, 100)\n","\n","        self.word_embedding_layer = nn.Embedding(word_vocab, word_emb_dim, padding_idx = 0)\n","        self.char_embedding_layer = nn.Embedding(char_vocab, char_emb_dim, padding_idx = 0)\n","        self.char_encoder_block = CharacterEncoderBlock(char_emb_dim, 128)\n","        self.embedder = nn.Linear(word_emb_dim+char_emb_dim, 100)\n","        self.encoder_layers = [EncoderBlock(100, num_conv_blocks, num_attention_blocks, num_heads) for i in range(num_encoder_blocks)]\n","        self.seq_layers = nn.Sequential(*self.encoder_layers)\n","        self.classifier = nn.Linear(100, num_classes, bias = False)\n","\n","    def forward(self, X, X_char, type = \"mlm\"):\n","        '''\n","        inputs: X = [batch_sz, seq_len]\n","                X_char = [batch_sz, seq_len, word_len]\n","        '''\n","        batch_sz, seq_len = X.size(0), X.size(1)\n","        X_char = self.char_embedding_layer(X_char)\n","        X_char = self.char_encoder_block(X_char)\n","        # X_char = [batch_sz, seq_len, char_emb_dim]\n","\n","        if X is not None:\n","            X = self.word_embedding_layer(X)\n","            X = torch.cat([X_char ,X], dim = -1)\n","            X = self.embedder(X)\n","        else:\n","            X = X_char\n","\n","        if self.positional_encoding:\n","            pos = torch.tensor([[i for i in range(seq_len)]*batch_sz]).type(torch.LongTensor).view(batch_sz, seq_len).to(device)\n","            X = X + self.positional_embedding(pos)\n","\n","        X = self.seq_layers(F.dropout(X, p=0.15, training=self.training))\n","\n","        sentence_embedding = None\n","        if type == \"classification\":\n","            sentence_embedding = X.mean(dim=1)\n","            X = self.classifier(F.dropout(sentence_embedding, p=0.15, training= self.training))\n","\n","        return F.sigmoid(X), sentence_embedding\n","\n","    def loss(self, pred_probs, label_matrix):\n","      _gamma_ = 2\n","      eps = 1e-4\n","\n","      ## focal loss formulation :\n","      ## loss = (1 - pi)^2 * log(pi) for positive class; (pi ^ 2) * log(1 - pi) for negative class.\n","\n","      componentwise_loss = ((label_matrix - pred_probs) ** _gamma_ ) * torch.log2(torch.abs(1. - label_matrix - pred_probs + eps))\n","\n","      return -(componentwise_loss).mean()\n","\n","# '''\n","# Masked language model\n","# '''\n","# class MaskedLM(nn.Module):\n","#     def __init__(self, deep_model, vocab_sz, embedding_sz):\n","#         super(MaskedLM,self).__init__()\n","#         self.myModel = deep_model\n","#         self.token_prediction_layer = nn.Linear(embedding_sz, vocab_sz)\n","#         self.log_softmax = nn.LogSoftmax(dim= -1)\n","\n","#     def forward(self, X, X_char, attn_mask):\n","#         out, _ = self.myModel(X, X_char, \"mlm\")\n","#         out = self.token_prediction_layer(out[attn_mask])\n","#         return self.log_softmax(out)"],"metadata":{"id":"wq2F_2lsL-yr","executionInfo":{"status":"ok","timestamp":1689514372032,"user_tz":-330,"elapsed":527,"user":{"displayName":"Ritam Chattopadhyay","userId":"01007328510308016568"}}},"execution_count":453,"outputs":[]},{"cell_type":"code","source":["device = 'cuda:0' if torch.cuda.is_available() else 'cpu'\n","print(device)\n","WORD_VOCAB_SIZE = len(train_dataset.vocab_object.tok_to_id)\n","CHAR_VOCAB_SIZE = len(train_dataset.vocab_object.char_to_id)\n","CHAR_EMB_DIM = 128\n","WORD_EMB_DIM = 100\n","\n","myModel = TweetAnalysisModel(\n","               word_vocab= WORD_VOCAB_SIZE,\\\n","               char_vocab= CHAR_VOCAB_SIZE,\\\n","               char_emb_dim= CHAR_EMB_DIM,\\\n","               word_emb_dim = WORD_EMB_DIM,\\\n","               num_conv_blocks= 1,\\\n","               num_attention_blocks= 1,\\\n","               num_heads= 5,\\\n","               num_encoder_blocks= 6,\\\n","               num_classes= 12,\\\n","               positional_encoding= False).to(device)\n","\n","print(f\"Vocab_sz: {WORD_VOCAB_SIZE}\")\n","# temp_model = MaskedLM(myModel, WORD_VOCAB_SIZE, 100)\n","# temp_model.load_state_dict(torch.load(\"/data-mount/Multilingual HateSpeech Research/saved_models/model_[mlm].pth\", map_location=device))\n","# criterion = nn.BCEWithLogitsLoss().to(device)\n","# criterion = nn.CrossEntropyLoss().to(device)\n","class_weights = class_weights.to(device)\n","optimizer = torch.optim.Adam(myModel.parameters(), lr = 2e-4, eps=1e-08, betas=(0.5, 0.9))\n","# max_iter = 1000\n","# scheduler = torch.optim.lr_scheduler.CosineAnnealingLR(optimizer, max_iter, eta_min= 5e-5)\n","print(f\"Number of trainable parameters: {sum([p.numel() for p in myModel.parameters() if p.requires_grad])}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Khwd_GSbMBo_","executionInfo":{"status":"ok","timestamp":1689514375171,"user_tz":-330,"elapsed":381,"user":{"displayName":"Ritam Chattopadhyay","userId":"01007328510308016568"}},"outputId":"a5b6e5e5-5a63-4db0-d5a3-6f6768456417"},"execution_count":454,"outputs":[{"output_type":"stream","name":"stdout","text":["cuda:0\n","Vocab_sz: 33481\n","Number of trainable parameters: 4191200\n"]}]},{"cell_type":"code","source":["missed_token_list = []\n","def initialise_word_embeddings(type = None):\n","  missed = 0\n","  if type == 'w2v':\n","    for tok,id in train_dataset.vocab_object.tok_to_id.items():\n","      try:\n","        myModel.word_embedding_layer.weight.data[id] = torch.from_numpy(w2v.wv[tok])\n","      except KeyError:\n","        missed_token_list.append(tok)\n","        missed+=1\n","  elif type == 'muril':\n","    for tok,id in train_dataset.vocab_object.tok_to_id.items():\n","      try:\n","        myModel.word_embedding_layer.weight.data[id] = torch.tensor(json.loads(embeddings.loc[tok][0])).float()\n","      except KeyError:\n","        missed+=1\n","  print(f\"missed token count: {missed}\")\n","\n","initialise_word_embeddings(type = 'w2v')\n","print(myModel.word_embedding_layer.weight.data.size())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"j-JfDZG3MEIY","executionInfo":{"status":"ok","timestamp":1689514381213,"user_tz":-330,"elapsed":1093,"user":{"displayName":"Ritam Chattopadhyay","userId":"01007328510308016568"}},"outputId":"1b9bbab0-f671-4bc1-8e33-88bfd58a7dc2"},"execution_count":455,"outputs":[{"output_type":"stream","name":"stdout","text":["missed token count: 2\n","torch.Size([33481, 100])\n"]}]},{"cell_type":"code","source":["missed_token_list"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HijkSGAhMGGq","executionInfo":{"status":"ok","timestamp":1689514382879,"user_tz":-330,"elapsed":3,"user":{"displayName":"Ritam Chattopadhyay","userId":"01007328510308016568"}},"outputId":"d1fbeda5-7b56-49ba-964a-ce98a878b950"},"execution_count":456,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['<pad_tok>', '<unk_tok>']"]},"metadata":{},"execution_count":456}]},{"cell_type":"code","source":["import tqdm"],"metadata":{"id":"giMj-6eqZb2g","executionInfo":{"status":"ok","timestamp":1689514386922,"user_tz":-330,"elapsed":673,"user":{"displayName":"Ritam Chattopadhyay","userId":"01007328510308016568"}}},"execution_count":457,"outputs":[]},{"cell_type":"code","source":["EPOCHS = 15\n","train_steps = 0\n","LOSS = []\n","VAL_LOSS = []\n","dot_product = []\n","\n","train_loss  = 0\n","for n_epoch in tqdm.tqdm(range(EPOCHS)):\n","\n","    myModel.train()\n","    for i,X in enumerate(train_dataloader):\n","        train_steps += 1\n","\n","        words = X['word_tokenized'].to(device)\n","        chars = X['char_tokenized'].to(device)\n","        label_matrix = X[\"class\"].to(device)\n","\n","        classwise_probs, _ = myModel(words, chars, 'classification')\n","\n","        loss = myModel.loss(classwise_probs, label_matrix)\n","\n","        optimizer.zero_grad()\n","        loss.backward()\n","        optimizer.step()\n","        # scheduler.step()\n","\n","        train_loss += loss.item()\n","\n","        torch.cuda.empty_cache()\n","\n","        if train_steps%200 == 0:\n","\n","            with torch.no_grad():\n","                myModel.eval()\n","                val_loss = 0\n","                for i,X in enumerate(val_dataloader):\n","\n","                    words = X['word_tokenized'].to(device)\n","                    chars = X['char_tokenized'].to(device)\n","                    label_matrix = X[\"class\"].to(device)\n","\n","                    classwise_probs, _ = myModel(words, chars, 'classification')\n","\n","                    loss = myModel.loss(classwise_probs, label_matrix)\n","\n","                    val_loss += loss.item()\n","\n","                    torch.cuda.empty_cache()\n","\n","                  # dot_product.append(cosine_score(myModel))\n","\n","            LOSS.append(train_loss/train_steps)\n","            VAL_LOSS.append(val_loss/len(val_dataloader))\n","\n","            print(f'Epoch: {n_epoch+1} | Steps: {train_steps} | Train_loss: {train_loss/train_steps:0.4f} | Val_loss: {val_loss/len(val_dataloader):0.4f}')\n","            train_loss = 0\n","            train_steps = 0\n"],"metadata":{"id":"Fyc_Hh6gMJUo","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1689514576423,"user_tz":-330,"elapsed":188727,"user":{"displayName":"Ritam Chattopadhyay","userId":"01007328510308016568"}},"outputId":"0a66a4fc-c189-4797-e5c3-5ffebcd24f37"},"execution_count":458,"outputs":[{"output_type":"stream","name":"stderr","text":["  7%|â–‹         | 1/15 [00:12<02:51, 12.23s/it]"]},{"output_type":"stream","name":"stdout","text":["Epoch: 2 | Steps: 200 | Train_loss: 1.5659 | Val_loss: 1.3515\n"]},{"output_type":"stream","name":"stderr","text":[" 20%|â–ˆâ–ˆ        | 3/15 [00:37<02:29, 12.46s/it]"]},{"output_type":"stream","name":"stdout","text":["Epoch: 4 | Steps: 200 | Train_loss: 1.3635 | Val_loss: 1.3515\n"]},{"output_type":"stream","name":"stderr","text":["\r 27%|â–ˆâ–ˆâ–‹       | 4/15 [00:50<02:19, 12.69s/it]"]},{"output_type":"stream","name":"stdout","text":["Epoch: 5 | Steps: 200 | Train_loss: 1.3599 | Val_loss: 1.3515\n"]},{"output_type":"stream","name":"stderr","text":[" 40%|â–ˆâ–ˆâ–ˆâ–ˆ      | 6/15 [01:15<01:53, 12.56s/it]"]},{"output_type":"stream","name":"stdout","text":["Epoch: 7 | Steps: 200 | Train_loss: 1.3651 | Val_loss: 1.3515\n"]},{"output_type":"stream","name":"stderr","text":[" 53%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–Ž    | 8/15 [01:41<01:28, 12.59s/it]"]},{"output_type":"stream","name":"stdout","text":["Epoch: 9 | Steps: 200 | Train_loss: 1.3573 | Val_loss: 1.3515\n"]},{"output_type":"stream","name":"stderr","text":["\r 60%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ    | 9/15 [01:53<01:15, 12.61s/it]"]},{"output_type":"stream","name":"stdout","text":["Epoch: 10 | Steps: 200 | Train_loss: 1.3594 | Val_loss: 1.3515\n"]},{"output_type":"stream","name":"stderr","text":[" 73%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–Ž  | 11/15 [02:18<00:50, 12.54s/it]"]},{"output_type":"stream","name":"stdout","text":["Epoch: 12 | Steps: 200 | Train_loss: 1.3629 | Val_loss: 1.3515\n"]},{"output_type":"stream","name":"stderr","text":["\r 80%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ  | 12/15 [02:31<00:37, 12.60s/it]"]},{"output_type":"stream","name":"stdout","text":["Epoch: 13 | Steps: 200 | Train_loss: 1.3582 | Val_loss: 1.3515\n"]},{"output_type":"stream","name":"stderr","text":[" 93%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–Ž| 14/15 [02:55<00:12, 12.30s/it]"]},{"output_type":"stream","name":"stdout","text":["Epoch: 15 | Steps: 200 | Train_loss: 1.3616 | Val_loss: 1.3515\n"]},{"output_type":"stream","name":"stderr","text":["100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 15/15 [03:08<00:00, 12.59s/it]\n"]}]},{"cell_type":"code","source":["plt.plot(LOSS)\n","plt.plot(VAL_LOSS)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":430},"id":"BYbWKWTVbKFA","executionInfo":{"status":"ok","timestamp":1689514610936,"user_tz":-330,"elapsed":522,"user":{"displayName":"Ritam Chattopadhyay","userId":"01007328510308016568"}},"outputId":"85681669-5a10-4fa1-e1f8-01871353772a"},"execution_count":459,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["def inference():\n","\n","  predictedLabels = []\n","  originalLabels = []\n","\n","  myModel.eval()\n","  with torch.no_grad():\n","\n","    for i,X in enumerate(train_dataloader):\n","      words = X['word_tokenized'].to(device)\n","      chars = X['char_tokenized'].to(device)\n","      class_labels = X[\"class\"].to(device)\n","\n","      batch_sz = words.size(0)\n","\n","      temp = [[] for i in range(batch_sz)]\n","\n","      classwise_probs, _ = myModel(words, chars, 'classification')\n","\n","      classwise_probs = classwise_probs.detach().cpu()\n","\n","      (r, c) = torch.where(classwise_probs > 0.5)\n","\n","      r, c = r.tolist(), c.tolist()\n","\n","      for index, class_id in zip(r,c):\n","        temp[index].append(class_id)\n","\n","      predictedLabels.extend(temp)\n","\n","      (r, c) = torch.where(class_labels == 1.)\n","\n","      r, c = r.tolist(), c.tolist()\n","\n","      temp = [[] for i in range(batch_sz)]\n","      for index, class_id in zip(r,c):\n","        temp[index].append(class_id)\n","\n","      originalLabels.extend(temp)\n","\n","  return predictedLabels, originalLabels"],"metadata":{"id":"6TlXL6fZZlEX","executionInfo":{"status":"ok","timestamp":1689514620305,"user_tz":-330,"elapsed":651,"user":{"displayName":"Ritam Chattopadhyay","userId":"01007328510308016568"}}},"execution_count":460,"outputs":[]},{"cell_type":"code","source":["a,b = inference()"],"metadata":{"id":"i2IP2hpFdpNt","executionInfo":{"status":"ok","timestamp":1689514626620,"user_tz":-330,"elapsed":5656,"user":{"displayName":"Ritam Chattopadhyay","userId":"01007328510308016568"}}},"execution_count":461,"outputs":[]},{"cell_type":"code","source":["confusion_matrix = np.zeros((12,12))\n","# confusion_matrix"],"metadata":{"id":"Zvqps2tjlWld","executionInfo":{"status":"ok","timestamp":1689514626621,"user_tz":-330,"elapsed":5,"user":{"displayName":"Ritam Chattopadhyay","userId":"01007328510308016568"}}},"execution_count":462,"outputs":[]},{"cell_type":"code","source":["for i,j in zip(a,b):\n","  for pred, label in zip(i,j):\n","    confusion_matrix[label, pred] += 1"],"metadata":{"id":"m9BWv7MijVcR","executionInfo":{"status":"ok","timestamp":1689514626621,"user_tz":-330,"elapsed":3,"user":{"displayName":"Ritam Chattopadhyay","userId":"01007328510308016568"}}},"execution_count":463,"outputs":[]},{"cell_type":"code","source":["plt.imshow(confusion_matrix, cmap='hot', interpolation='nearest')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":430},"id":"oIQYqD7plQd5","executionInfo":{"status":"ok","timestamp":1689513953426,"user_tz":-330,"elapsed":6,"user":{"displayName":"Ritam Chattopadhyay","userId":"01007328510308016568"}},"outputId":"e58f616b-784e-4a44-b160-94539ad65f41"},"execution_count":450,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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wLorr7wyJk6cGDfeeOPXxgeAw0fFAzRmzJiYNGnSgHVHHHFEHHPMMV9ZD8DhyzchAJCiKnfBfdlzzz03GLsBYAhxBgRACgECIIUAAZBCgABIIUAApBAgAFIIEAApBAiAFAIEQAoBAiCFAAGQQoAASCFAAKQQIABSCBAAKQQIgBQCBEAKAQIghQABkEKAAEghQACkECAAUggQACkECIAUAgRACgECIIUAAZBCgABIIUAApBAgAFIIEAApBAiAFAIEQAoBAiCFAAGQQoAASCFAAKQQIABSCBAAKQQIgBQCBEAKAQIghQABkEKAAEghQACkECAAUggQACkECIAUAgRACgECIIUAAZCiKgF6++2344orrohjjjkm6uvr47TTTostW7ZUY1cADFEjK/2C77//fkybNi3OP//8ePrpp+N73/te7Nq1K4466qhK7wqAIaziAVqyZEk0NzfHgw8+2L+upaWl0rsBYIir+EdwTz75ZEyZMiUuu+yyGDt2bJxxxhnxwAMPHHD7np6eKJfLAxYAhr+KB+jNN9+MZcuWxUknnRR///vf45prronZs2fH8uXL97t9e3t7lEql/qW5ubnSIwFwCKopiqKo5AuOGjUqpkyZEi+++GL/utmzZ8fmzZtj/fr1X9m+p6cnenp6+n8ul8vR3Nwc9RFRU8nBABgURUR8HBFdXV3R0NBwwO0qfgY0fvz4OOWUUwasO/nkk+Ott97a7/Z1dXXR0NAwYAFg+Kt4gKZNmxY7duwYsG7nzp1x/PHHV3pXAAxhFQ/Q9ddfHxs2bIjbbrst3njjjVi5cmXcf//90dbWVuldATCEVfwaUETEU089FQsWLIhdu3ZFS0tLzJs3L379619/o+eWy+UolUquAQEMUd/0GlBVAvRtCBDA0JZ2EwIAfBMCBEAKAQIghQABkEKAAEghQACkECAAUggQACkECIAUAgRACgECIIUAAZBCgABIIUAApBAgAFIIEAApBAiAFAIEQAoBAiCFAAGQQoAASCFAAKQQIABSCBAAKQQIgBQCBEAKAQIghQABkEKAAEghQACkECAAUggQACkECIAUAgRACgECIIUAAZBCgABIIUAApBAgAFIIEAApBAiAFAIEQAoBAiCFAAGQQoAASCFAAKQQIABSCBAAKQQIgBQCBECKigeot7c3Fi5cGC0tLVFfXx8nnnhi3HLLLVEURaV3BcAQNrLSL7hkyZJYtmxZLF++PE499dTYsmVLXHnllVEqlWL27NmV3h0AQ1TFA/Tiiy/GJZdcEjNmzIiIiBNOOCEeeeSR2LRpU6V3BcAQVvGP4M4999xYu3Zt7Ny5MyIiXn755XjhhRfioosu2u/2PT09US6XBywADH8VPwOaP39+lMvlmDhxYtTW1kZvb28sXrw4Zs6cud/t29vb4+abb670GAAc4ip+BvTYY4/FihUrYuXKlbF169ZYvnx5/OlPf4rly5fvd/sFCxZEV1dX/9LR0VHpkQA4BNUUFb49rbm5OebPnx9tbW3962699dZ4+OGH4/XXXz/o88vlcpRKpaiPiJpKDgbAoCgi4uOI6OrqioaGhgNuV/EzoI8++ihGjBj4srW1tdHX11fpXQEwhFX8GtDFF18cixcvjgkTJsSpp54a27ZtizvvvDOuuuqqSu8KgCGs4h/BdXd3x8KFC2P16tWxd+/eaGpqil/84hexaNGiGDVq1EGf7yM4gKHtm34EV/EAfVsCBDC0pV0DAoBvQoAASCFAAKQQIABSCBAAKQQIgBQCBEAKAQIghQABkEKAAEghQACkECAAUggQACkECIAUAgRACgECIIUAAZBCgABIIUAApBAgAFIIEAApBAiAFAIEQAoBAiCFAAGQQoAASCFAAKQQIABSCBAAKQQIgBQCBEAKAQIghQABkEKAAEghQACkECAAUggQACkECIAUAgRACgECIIUAAZBCgABIIUAApBAgAFIIEAApBAiAFAIEQAoBAiCFAAGQQoAASCFAAKT4rwP0/PPPx8UXXxxNTU1RU1MTjz/++IDHi6KIRYsWxfjx46O+vj5aW1tj165dlZoXgGHivw7Qvn37YvLkybF06dL9Pn7HHXfEXXfdFffee29s3LgxjjjiiJg+fXp88skn33pYAIaPmqIoiv/5yTU1sXr16rj00ksj4vOzn6ampvjNb34Tv/3tbyMioqurKxobG+Ohhx6Kyy+//KCvWS6Xo1QqRX1E1PyvgwGQpoiIj+Pz9/+GhoYDblfRa0C7d++Ozs7OaG1t7V9XKpVi6tSpsX79+v0+p6enJ8rl8oAFgOGvogHq7OyMiIjGxsYB6xsbG/sf+7L29vYolUr9S3NzcyVHAuAQlX4X3IIFC6Krq6t/6ejoyB4JgEFQ0QCNGzcuIiL27NkzYP2ePXv6H/uyurq6aGhoGLAAMPxVNEAtLS0xbty4WLt2bf+6crkcGzdujHPOOaeSuwJgiBv53z7hww8/jDfeeKP/5927d8f27dvj6KOPjgkTJsTcuXPj1ltvjZNOOilaWlpi4cKF0dTU1H+nHABE/A8B2rJlS5x//vn9P8+bNy8iImbNmhUPPfRQ3HDDDbFv3764+uqr44MPPojzzjsvnnnmmRg9enTlpgZgyPtWvwdUDX4PCGBoS/k9IAD4pgQIgBQCBEAKAQIghQABkEKAAEghQACkECAAUggQACkECIAUAgRACgECIIUAAZBCgABIIUAApBAgAFIIEAApBAiAFAIEQAoBAiCFAAGQQoAASCFAAKQQIABSCBAAKQQIgBQCBEAKAQIghQABkEKAAEghQACkECAAUggQACkECIAUAgRACgECIIUAAZBCgABIMTJ7gC8riuLzfybPAcD/5ov37y/ezw/kkAtQd3d3RER8kjwHAN9Od3d3lEqlAz5eUxwsUYOsr68v3nnnnRgzZkzU1NT8188vl8vR3NwcHR0d0dDQUIUJDz2H4zFHOO7D6bgPx2OOGLrHXRRFdHd3R1NTU4wYceArPYfcGdCIESPiuOOO+9av09DQMKT+hVXC4XjMEY77cHI4HnPE0Dzurzvz+YKbEABIIUAApBh2Aaqrq4ubbrop6urqskcZNIfjMUc47sPpuA/HY44Y/sd9yN2EAMDhYdidAQEwNAgQACkECIAUAgRAimEVoKVLl8YJJ5wQo0ePjqlTp8amTZuyR6qq9vb2OOuss2LMmDExduzYuPTSS2PHjh3ZYw2q22+/PWpqamLu3LnZo1Td22+/HVdccUUcc8wxUV9fH6eddlps2bIle6yq6u3tjYULF0ZLS0vU19fHiSeeGLfccstBv2NsKHn++efj4osvjqampqipqYnHH398wONFUcSiRYti/PjxUV9fH62trbFr166cYSts2ATo0UcfjXnz5sVNN90UW7dujcmTJ8f06dNj79692aNVzbp166KtrS02bNgQa9asic8++ywuvPDC2LdvX/Zog2Lz5s1x3333xemnn549StW9//77MW3atPjOd74TTz/9dLz22mvx5z//OY466qjs0apqyZIlsWzZsrjnnnviX//6VyxZsiTuuOOOuPvuu7NHq5h9+/bF5MmTY+nSpft9/I477oi77ror7r333ti4cWMcccQRMX369Pjkk2HwjZnFMHH22WcXbW1t/T/39vYWTU1NRXt7e+JUg2vv3r1FRBTr1q3LHqXquru7i5NOOqlYs2ZN8ZOf/KSYM2dO9khVdeONNxbnnXde9hiDbsaMGcVVV101YN3PfvazYubMmUkTVVdEFKtXr+7/ua+vrxg3blzxxz/+sX/dBx98UNTV1RWPPPJIwoSVNSzOgD799NN46aWXorW1tX/diBEjorW1NdavX5842eDq6uqKiIijjz46eZLqa2trixkzZgz4dz6cPfnkkzFlypS47LLLYuzYsXHGGWfEAw88kD1W1Z177rmxdu3a2LlzZ0REvPzyy/HCCy/ERRddlDzZ4Ni9e3d0dnYO+O+8VCrF1KlTh8V72yH3ZaT/i/feey96e3ujsbFxwPrGxsZ4/fXXk6YaXH19fTF37tyYNm1aTJo0KXucqlq1alVs3bo1Nm/enD3KoHnzzTdj2bJlMW/evPj9738fmzdvjtmzZ8eoUaNi1qxZ2eNVzfz586NcLsfEiROjtrY2ent7Y/HixTFz5szs0QZFZ2dnRMR+39u+eGwoGxYB4vMzgldffTVeeOGF7FGqqqOjI+bMmRNr1qyJ0aNHZ48zaPr6+mLKlClx2223RUTEGWecEa+++mrce++9wzpAjz32WKxYsSJWrlwZp556amzfvj3mzp0bTU1Nw/q4DxfD4iO4Y489Nmpra2PPnj0D1u/ZsyfGjRuXNNXgufbaa+Opp56KZ599tiJ/yuJQ9tJLL8XevXvjRz/6UYwcOTJGjhwZ69ati7vuuitGjhwZvb292SNWxfjx4+OUU04ZsO7kk0+Ot956K2miwfG73/0u5s+fH5dffnmcdtpp8ctf/jKuv/76aG9vzx5tUHzx/jVc39uGRYBGjRoVZ555Zqxdu7Z/XV9fX6xduzbOOeecxMmqqyiKuPbaa2P16tXxj3/8I1paWrJHqroLLrggXnnlldi+fXv/MmXKlJg5c2Zs3749amtrs0esimnTpn3lFvudO3fG8ccfnzTR4Pjoo4++8gfNamtro6+vL2miwdXS0hLjxo0b8N5WLpdj48aNw+O9LfsuiEpZtWpVUVdXVzz00EPFa6+9Vlx99dXFkUceWXR2dmaPVjXXXHNNUSqViueee674z3/+07989NFH2aMNqsPhLrhNmzYVI0eOLBYvXlzs2rWrWLFiRfHd7363ePjhh7NHq6pZs2YV3//+94unnnqq2L17d/HXv/61OPbYY4sbbrghe7SK6e7uLrZt21Zs27atiIjizjvvLLZt21b8+9//LoqiKG6//fbiyCOPLJ544onin//8Z3HJJZcULS0txccff5w8+bc3bAJUFEVx9913FxMmTChGjRpVnH322cWGDRuyR6qqiNjv8uCDD2aPNqgOhwAVRVH87W9/KyZNmlTU1dUVEydOLO6///7skaquXC4Xc+bMKSZMmFCMHj26+MEPflD84Q9/KHp6erJHq5hnn312v/8fz5o1qyiKz2/FXrhwYdHY2FjU1dUVF1xwQbFjx47coSvEn2MAIMWwuAYEwNAjQACkECAAUggQACkECIAUAgRACgECIIUAAZBCgABIIUAApBAgAFIIEAAp/g+zkqm/CM/mPQAAAABJRU5ErkJggg==\n"},"metadata":{}}]},{"cell_type":"code","source":["label_occ"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hOlYeS_LmAzc","executionInfo":{"status":"ok","timestamp":1689512387130,"user_tz":-330,"elapsed":730,"user":{"displayName":"Ritam Chattopadhyay","userId":"01007328510308016568"}},"outputId":"6e6221cc-4602-415f-e438-44aea779c8f3"},"execution_count":400,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 750., 4883., 1116., 2304., 2196.,  966.,  629.,  924.,  292.,\n","       1897., 1159.,  105.])"]},"metadata":{},"execution_count":400}]},{"cell_type":"code","source":["Acc = sum([confusion_matrix[i][i] for i in range(12)]) / confusion_matrix.sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1g54XyqeqVgu","executionInfo":{"status":"ok","timestamp":1689512387130,"user_tz":-330,"elapsed":4,"user":{"displayName":"Ritam Chattopadhyay","userId":"01007328510308016568"}},"outputId":"1107362f-6164-43f2-b53e-6f46d0144cbd"},"execution_count":401,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-401-130dba792419>:1: RuntimeWarning: invalid value encountered in double_scalars\n","  Acc = sum([confusion_matrix[i][i] for i in range(12)]) / confusion_matrix.sum()\n"]}]},{"cell_type":"code","source":["Acc"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OS2lV49XqoNs","executionInfo":{"status":"ok","timestamp":1689512388274,"user_tz":-330,"elapsed":1,"user":{"displayName":"Ritam Chattopadhyay","userId":"01007328510308016568"}},"outputId":"4f89a871-6d31-4488-ad16-2646f6e34aef"},"execution_count":402,"outputs":[{"output_type":"execute_result","data":{"text/plain":["nan"]},"metadata":{},"execution_count":402}]},{"cell_type":"code","source":[],"metadata":{"id":"70uIy8WCqo9Y","executionInfo":{"status":"ok","timestamp":1689511220370,"user_tz":-330,"elapsed":6,"user":{"displayName":"Ritam Chattopadhyay","userId":"01007328510308016568"}}},"execution_count":308,"outputs":[]}]}